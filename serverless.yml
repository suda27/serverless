service: rs-cognito-poc-sls
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: "*"
  apiKeys:
    - free:
        - myFreeApiKey
    - paid:
        - myPaidApiKey
  usagePlan:
    - free:
        quota:
          limit: 1000
          period: MONTH
        throttle:
          rateLimit: 5
          burstLimit: 20
    - paid:
        quota:
          limit: 10000
          period: MONTH
        throttle:
          rateLimit: 50
          burstLimit: 200

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: myserverlessproject-uploadbucket-suda
  imageUploadBucket: imageuploadbucketsuda
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          # private: true
          authorizer:
            arn: ${opt:acarn}
            # arn: arn:aws:cognito-idp:us-east-1:699730620999:userpool/us-east-1_II8eyDXpo
            

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true

  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true

  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true

  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true

  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: chuck-norris/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: http://api.icndb.com/{proxy}
            parameters:
              paths:
                proxy: true

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true

  imageUpload:
    handler: lambdas/endpoints/imageUpload.handler
    events:
      - http:
          path: image-upload
          method: POST
          cors: true

  imageResize:
    handler: lambdas/endpoints/imageResize.handler
    events:
      - s3:
          bucket: ${self:custom.imageUploadBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true
  
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead

    MyDyanmoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    myAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myAssumeRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties: 
        UserPoolName: ${self:provider.stage}-user-pool  
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email 
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
        ClientName: ${self:provider.stage}-user-pool-client  
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
