service: rs-cognito-poc-sls
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
      - Effect: Allow
        Action: 
            - dynamodb:*
            - s3:*
        Resource:  '*'

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
    individually: true  

custom:
  tableName: player-points
  bucketName: myserverlessproject-uploadbucket-suda
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
     - http:
         path: get-user/{ID}
         method: GET
         cors:  true

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
     - http:
         path: get-player-score/{ID}
         method: GET
         cors:  true  
         
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
     - http:
         path: create-player-score/{ID}
         method: POST
         cors:  true
         
         
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
     - http:
         path: create-file/{fileName}
         method: POST
         cors:  true
         
         
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
     - http:
         path: get-file/{fileName}
         method: GET
         cors:  true       
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: myserverlessproject-uploadbucket-suda
    MyDyanmoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:    
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID  
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        #    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
